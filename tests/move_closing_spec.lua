-- Run with PlenaryBustedFile test/move_closing_spec.lua
require("plenary")
local is_balanced_pair = require("move-enclosing")._is_balanced_pair
local is_balanced = require("move-enclosing")._is_balanced
local find_next = require("move-enclosing")._find_next
local move_match = require("move-enclosing")._move_match

describe("move-enclosing.is_balanced_pair", function()
  it("Should find an empty line balanced", function()
    assert.are.same(true, is_balanced_pair("", "[", "]"))
  end)
  it("Should find a balanced line balanced for asymmetric braces", function()
    assert.are.same(true, is_balanced_pair("[lorem] ipsum", "[", "]"))
  end)
  it("Should find a balanced line balanced for symmetric braces", function()
    assert.are.same(true, is_balanced_pair("'lorem' ipsum", "'", "'"))
  end)
  it(
    "Should not find a balanced line balanced for asymmetric braces",
    function()
      assert.are.same(false, is_balanced_pair("[lorem][ ipsum", "[", "]"))
    end
  )
  it("Should not find a balanced line balanced for symmetric braces", function()
    assert.are.same(false, is_balanced_pair("'lorem' 'ipsum", "'", "'"))
  end)
end)

describe("move-enclosing.is_balanced", function()
  it("Should find an empty line balanced", function()
    assert.are.same(true, is_balanced(""))
  end)
  it("Balanced parenthesis should be found balanced", function()
    assert.are.same(true, is_balanced("(lorem)"))
  end)
  it("Should find parentheses unbalanced", function()
    assert.are.same(false, is_balanced("[(lorem]"))
  end)
end)

describe("move-enclosing.find_next", function()
  it("Should not find anything in an empty line", function()
    local found = find_next("", 1, 2)
    assert.are.same(nil, found)
  end)
  it("Should not find anything if there is not any other closing", function()
    local found = find_next("()lorem", 2, 3)
    assert.are.same(nil, found)
  end)
  it("Should find closing bracket", function()
    assert.are.same(9, find_next("[()lorem]", 3, 4))
  end)
end)

describe("move-enclosing.move_match", function()
  it("Should not touch an empty line", function()
    assert.are.same(nil, move_match("", 1, false))
  end)
  it("Should move inside of brackets", function()
    assert.are.same(8, move_match("[()lorem] ipsum", 3, false))
  end)
  it("Should not move the parens", function()
    assert.are.same(nil, move_match("[(lorem)] ipsum", 8, false))
  end)
  it("Should move to before punctuation", function()
    assert.are.same(7, move_match("()lorem_ ipsum", 2, false))
  end)
  it("Should move to after punctuation", function()
    assert.are.same(8, move_match("()lorem_ ipsum", 2, true))
  end)
  it("Should move to before letter", function()
    assert.are.same(4, move_match("()[]a{lorem ipsum}a,", 2, false))
  end)
  it("Should move to the end letter", function()
    assert.are.same(20, move_match("()[]a{lorem ipsum}a,", 2, true))
  end)
end)
