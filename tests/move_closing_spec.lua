-- Run with PlenaryBustedFile test/move_closing_spec.lua
local is_balanced = require("move-enclosing")._is_balanced
local find_next = require("move-enclosing")._find_next
local move_match = require("move-enclosing")._move_match

describe("move-enclosing.is_balanced", function()
  it("Should not find anything in an empty line", function()
    local balanced = is_balanced("")
    assert.are.same(true, balanced)
  end)
  it("Should not find anything if there is not any other closing", function()
    local balanced = is_balanced("(an)")
    assert.are.same(true, balanced)
  end)
  it("Should find closing bracket", function()
    local balanced = is_balanced("[(an]")
    assert.are.same(false, balanced)
  end)
end)

describe("move-enclosing.find_next", function()
  it("Should not find anything in an empty line", function()
    local position = find_next("", 1, 2)
    assert.are.same(nil, position)
  end)
  it("Should not find anything if there is not any other closing", function()
    local position = find_next("()an", 2, 3)
    assert.are.same(nil, position)
  end)
  it("Should find closing bracket", function()
    local position = find_next("[()an]", 3, 4)
    assert.are.same(6, position)
  end)
end)

describe("move-enclosing.move_match", function()
  it("Should not touch an empty line", function()
    local out_bool = move_match("", 1, false)
    assert.are.same(false, out_bool)
  end)
  it("Should move inside of brackets", function()
    local out_bool = move_match("[()yet] another", 3, false)
    assert.are.same(true, out_bool)
  end)
  it("Should not move the parens", function()
    local out_bool = move_match("[(yet)] another", 6, false)
    assert.are.same(false, out_bool)
  end)
  it("Should move to before punctuation", function()
    local out_bool = move_match("()yet_ another", 2, false)
    assert.are.same(true, out_bool)
  end)
end)
